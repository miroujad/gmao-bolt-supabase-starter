"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_lib_supabaseClient_ts"],{

/***/ "(app-pages-browser)/./lib/supabaseClient.ts":
/*!*******************************!*\
  !*** ./lib/supabaseClient.ts ***!
  \*******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getCostsByAsset: function() { return /* binding */ getCostsByAsset; },\n/* harmony export */   getKpiPM: function() { return /* binding */ getKpiPM; },\n/* harmony export */   getKpiWO: function() { return /* binding */ getKpiWO; },\n/* harmony export */   supabase: function() { return /* binding */ supabase; }\n/* harmony export */ });\n// lib/supabaseClient.ts — DEMO MODE complet (aucun backend requis)\nlet seq = {\n    di: 1,\n    ot: 1,\n    mi: 1\n};\nconst demoData = {\n    work_requests: [\n        {\n            id: 1,\n            code: \"DI-2025-000001\",\n            asset_id: 1,\n            title: \"Fuite hydraulique\",\n            description: \"V\\xe9rifier flexible\",\n            priority: 3,\n            status: \"OPEN\"\n        }\n    ],\n    work_orders: [\n        {\n            id: 1,\n            code: \"OT-2025-000001\",\n            source_request_id: null,\n            asset_id: 1,\n            type: \"PREVENTIVE\",\n            status: \"PLANNED\",\n            created_at: new Date().toISOString()\n        }\n    ],\n    inventory_items: [\n        {\n            id: 1,\n            sku: \"SKF-6205\",\n            name: \"Roulement 6205\",\n            stock_qty: 25,\n            avg_cost: 120\n        },\n        {\n            id: 2,\n            sku: \"V-BELT-SPB\",\n            name: \"Courroie SPB\",\n            stock_qty: 50,\n            avg_cost: 35\n        }\n    ],\n    material_issues: []\n};\nfunction ok(data) {\n    return Promise.resolve({\n        data,\n        error: null\n    });\n}\nfunction ko(msg) {\n    return Promise.resolve({\n        data: null,\n        error: {\n            message: msg\n        }\n    });\n}\nfunction genCode(prefix, n) {\n    return \"\".concat(prefix, \"-\").concat(new Date().getFullYear(), \"-\").concat(String(n).padStart(6, \"0\"));\n}\nconst supabase = {\n    auth: {\n        getUser: async ()=>({\n                data: {\n                    user: {\n                        id: \"demo-user\"\n                    }\n                },\n                error: null\n            })\n    },\n    from: (table)=>({\n            // SELECT\n            select: async (_cols)=>{\n                if (table === \"material_issues\") return ok([\n                    ...demoData.material_issues\n                ]);\n                // compute simple views here if needed later\n                return ok(JSON.parse(JSON.stringify(demoData[table])));\n            },\n            // WHERE eq(...).single()\n            eq: (field, val)=>({\n                    single: async ()=>{\n                        const row = demoData[table].find((r)=>r[field] === val) || null;\n                        return ok(row);\n                    }\n                }),\n            // INSERT\n            insert: async (row)=>{\n                const arr = Array.isArray(row) ? row : [\n                    row\n                ];\n                const tgt = demoData[table];\n                for (const r of arr){\n                    if (!r.id) r.id = tgt.length ? Math.max(...tgt.map((x)=>x.id || 0)) + 1 : 1;\n                    if (table === \"work_requests\" && !r.code) r.code = genCode(\"DI\", ++seq.di);\n                    if (table === \"work_orders\" && !r.code) r.code = genCode(\"OT\", ++seq.ot);\n                    tgt.push(r);\n                    // side effects demo\n                    if (table === \"material_issues\") {\n                        const item = demoData.inventory_items.find((i)=>i.id === r.item_id);\n                        if (item) item.stock_qty = Number(item.stock_qty) - Number(r.qty || 0);\n                    }\n                }\n                return ok(arr);\n            },\n            // UPDATE (very simple by id)\n            update: async (patch)=>{\n                const tgt = demoData[table];\n                if (!patch.id) return ko(\"update in demo requires {id}\");\n                const i = tgt.findIndex((r)=>r.id === patch.id);\n                if (i < 0) return ko(\"not found\");\n                tgt[i] = {\n                    ...tgt[i],\n                    ...patch\n                };\n                return ok(tgt[i]);\n            }\n        })\n};\n// Petites “vues” pour le dashboard (calculées à la volée)\nasync function getKpiWO() {\n    const total = demoData.work_orders.length;\n    const completed = demoData.work_orders.filter((w)=>w.status === \"COMPLETED\").length;\n    return [\n        {\n            mois: new Date().toISOString(),\n            ot_total: total,\n            ot_completed: completed,\n            completion_rate: total ? Math.round(1000 * completed / total) / 10 : 0\n        }\n    ];\n}\nasync function getKpiPM() {\n    const pm = demoData.work_orders.filter((w)=>w.type === \"PREVENTIVE\");\n    const done = pm.filter((w)=>w.status === \"COMPLETED\");\n    return [\n        {\n            mois: new Date().toISOString(),\n            pm_due: pm.length,\n            pm_done: done.length,\n            pm_compliance: pm.length ? Math.round(1000 * done.length / pm.length) / 10 : 0\n        }\n    ];\n}\nasync function getCostsByAsset() {\n    // faux calcul\n    return [\n        {\n            asset_code: \"MN-PNVH-1994\",\n            cost: 12500\n        },\n        {\n            asset_code: \"P-44965\",\n            cost: 8200\n        }\n    ];\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/supabaseClient.ts\n"));

/***/ })

}]);